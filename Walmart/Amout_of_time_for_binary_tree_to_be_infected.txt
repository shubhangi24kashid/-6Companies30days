Amout of time for binary tree to be infected

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,vector<int>>graph;;
    int amountOfTime(TreeNode* root, int start) {
        creategraph(root);

        queue<int>q;
        int time=-1;

        q.push(start);
        unordered_set<int>visited;

        while(!q.empty()){
            time++;
            for(int i=q.size(); i>0 ; i--){
              int curr=q.front();
              q.pop();
              visited.insert(curr);
              for(int adj:graph[curr]){
                if(!visited.count(adj)){
                    q.push(adj);
                }
              }
            }
        }
        return time;

    }
    void creategraph(TreeNode* root){
        if(!root){
            return;
        }
        if(root->left){
             graph[root->val].push_back(root->left->val);
             graph[root->left->val].push_back(root->val);
        }
        if(root->right){
             graph[root->val].push_back(root->right->val);
             graph[root->right->val].push_back(root->val);
        }
        creategraph(root->left);
        creategraph(root->right);
    }
};