Count the number of nice subarrays

#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        unordered_map<int, int> prefix;
         prefix[0] = 1; 
        int odd_count = 0, ans = 0;

        for (int num : nums) {
            // Increment odd count if the number is odd
            odd_count += (num % 2);

            // If `odd_count - k` exists in the prefix map, add its frequency to the result
            if (prefix.find(odd_count - k) != prefix.end()) {
                ans += prefix[odd_count - k];
            }

            // Update the prefix map
            prefix[odd_count]++;
        }

        return ans;
    }
};


Input:
plaintext
Copy code
nums = [1, 1, 2, 1, 1], k = 3
Execution:
Initialization: prefix = {0: 1}, odd_count = 0, ans = 0.
Traverse the array:
num = 1: odd_count = 1. No odd_count - k = -2 in prefix. Update prefix = {0: 1, 1: 1}.
num = 1: odd_count = 2. No odd_count - k = -1 in prefix. Update prefix = {0: 1, 1: 1, 2: 1}.
num = 2: odd_count = 2 (unchanged). No odd_count - k = -1. Update prefix = {0: 1, 1: 1, 2: 2}.
num = 1: odd_count = 3. odd_count - k = 0 exists in prefix. Add prefix[0] = 1 to ans. Update prefix = {0: 1, 1: 1, 2: 2, 3: 1}.
num = 1: odd_count = 4. odd_count - k = 1 exists in prefix. Add prefix[1] = 1 to ans. Update prefix = {0: 1, 1: 1, 2: 2, 3: 1, 4: 1}.
Result:
Total "nice subarrays" = 2.
Output: 2.


Key Edge Cases:
All Odd: nums = [1, 3, 5], k = 1
Output: 3 (each odd number forms a subarray).

All Even: nums = [2, 4, 6], k = 1
Output: 0 (no subarrays with odd numbers).

Mix of Odd and Even: nums = [1, 2, 1, 2, 1], k = 2
Output: 4.
This corrected approach is efficient and handles all edge cases. Let me know if you'd like further explanation!