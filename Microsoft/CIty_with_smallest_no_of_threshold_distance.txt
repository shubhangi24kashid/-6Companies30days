City with smallest no of threshold distance

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>>dist(n, vector<int>(n,INT_MAX));

        for(auto& edge: edges){
            dist[edge[0]][edge[1]]=edge[2];
             dist[edge[1]][edge[0]]=edge[2];
        }
        for(int i=0;i<n;i++){
            dist[i][i]=0;
        }
        
        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(dist[i][k]!=INT_MAX && dist[k][j]!=INT_MAX){
                        dist[i][j]=min( dist[i][j], dist[i][k]+dist[k][j]);
                    }
                }
            }
        }

        int count_MAX=n;
        int cityno=-1;

        for(int city=0;city<n;city++){
            int count=0;

            for(int adjcity=0;adjcity<n;adjcity++){
                if(dist[city][adjcity] <= distanceThreshold){
                    count++;
                }
            }
            if(count<= count_MAX){
                count_MAX=count;
                cityno=city;
            }
        }
       return cityno;
    }
};

solved using floyd warshall algorithm