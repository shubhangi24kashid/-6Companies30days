Rotting Oranges

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<pair<int,int>,int>>q;
        int total=0;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                }
                else if(grid[i][j]==1){
                   total++;
                }
            }
        }
        if(total==0) return 0;

         int timeElapsed = 0;
        vector<pair<int,int>>directions={{-1,0},{1,0},{0,-1},{0,1}};

        while(!q.empty()){
             auto [pos, time] = q.front();
            q.pop();
            int x = pos.first, y = pos.second;
             timeElapsed = max(timeElapsed, time);

            for(auto dir:directions){
                int nx= x+ dir.first, ny= y+dir.second;
                if(nx>=0 && nx<m && ny>=0 && ny<n && grid[nx][ny]==1){
                    grid[nx][ny]=2;
                    total--;
                    q.push({{nx, ny}, time + 1});
                }
            }
        }
         return total == 0 ? timeElapsed : -1;
    }
};